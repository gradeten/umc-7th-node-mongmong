// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique(map: "email") @db.VarChar(255)
  name          String   @db.VarChar(100)
  gender        String   @db.VarChar(15)
  birth         DateTime @db.Date
  address       String   @db.VarChar(255)
  detailAddress String?  @map("detail_address") @db.VarChar(255)
  phoneNumber   String   @map("phone_number") @db.VarChar(15)
  favorCategories       UserFavorCategory[]
  reviews  UserStoreReview[]
  missions      UserMission[]

  @@map("user")
}

model FoodCategory {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  userFavorCategories UserFavorCategory[]

  @@map("food_category")
}

model UserFavorCategory {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int          @map("food_category_id")

  @@index([foodCategoryId], map: "f_category_id")
  @@index([userId], map: "user_id")
  @@map("user_favor_category")
}

model Store {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)

  // 관계 설정: 한 Store에 여러 Review가 있을 수 있음
  reviews UserStoreReview[]
  missions Mission[]

  @@map("store")
}

model UserStoreReview {
  id            Int       @id @default(autoincrement())
  storeId       Int       @map("store_id")
  userId        Int       @map("user_id")
  comment       String    @db.Text  
  createdAt     DateTime  @default(now())
  rating        Float

  // 관계 설정: User와 Store와 연결된 필드
  store Store @relation(fields: [storeId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("user_store_review")
}

model Mission {
  id        Int       @id @default(autoincrement())
  storeId   Int       @map("store_id")
  price     Int
  point     Int

  store     Store     @relation(fields: [storeId], references: [id])
  userMissions UserMission[]

  @@map("mission")
}

model UserMission {
  id        Int         @id @default(autoincrement())
  userId    Int         @map("user_id")
  missionId Int         @map("mission_id")  // 미션 외래키 추가
  status    MissionState
  createdAt DateTime    @default(now())
  dueAt     DateTime

  mission   Mission     @relation(fields: [missionId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@map("user_mission")
}


enum MissionState {
  ONGOING
  DONE
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(512)
  expiresAt DateTime @map("expires_at")

  @@map("session")
}